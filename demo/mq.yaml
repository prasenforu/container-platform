apiVersion: v1
kind: Namespace
metadata:
  name: demomsg
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: rabbitmqsrv
  namespace: demomsg
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmqsrv
  template:
    metadata:
      labels:
        app: rabbitmqsrv
    spec:
      containers:
      - name: rabbitmqsrv-dc-pod
        image: prasenforu/rabbitmq:2.0
        ports:
        - containerPort: 5672
          name: service
        - containerPort: 15672
          name: management
      - image: prasenforu/rabbitmq-exporter:1.0
        name: rabbitmq-exporter
        ports:
        - containerPort: 9090
          name: exporter
        env:
        - name: RABBIT_USER
          value: "rabbitmq"
        - name: RABBIT_PASSWORD
          value: "znwk2BaTLAqowMrv"
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: '9090'
    prometheus.io/scrape: 'true'
  name: rabbitmqsrv
  namespace: demomsg
  labels:
    app: rabbitmqsrv
spec:
  type: LoadBalancer
  ports:
  - name: 5672-tcp
    port: 5672
    protocol: TCP
    targetPort: 5672
  - name: 15672-tcp
    port: 15672
    protocol: TCP
    targetPort: 15672
  - name: 9090-metrics
    port: 9090
    protocol: TCP
    targetPort: 9090
  selector:
    app: rabbitmqsrv
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mq-receive-config
  namespace: demomsg
data:
  receive.py: |
    #!/usr/bin/env python
    # receive.py

    import pika

    credentials = pika.PlainCredentials('rabbitmq', 'znwk2BaTLAqowMrv')
    parameters = pika.ConnectionParameters('rabbitmqsrv.demomsg.svc.cluster.local',
                                   5672,
                                   '/',
                                   credentials)

    connection = pika.BlockingConnection(parameters)
    channel = connection.channel()
    method_frame, header_frame, body = channel.basic_get('hello')
    if method_frame:
        print('Received message', body)
        channel.basic_ack(method_frame.delivery_tag)
    else:
        print('No message available')

    connection.close()
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mq-receiveall-config
  namespace: demomsg
data:
  receiveall.py: |
    #!/usr/bin/env python
    # receiveall.py

    import pika

    credentials = pika.PlainCredentials('rabbitmq', 'znwk2BaTLAqowMrv')
    parameters = pika.ConnectionParameters('rabbitmqsrv.demomsg.svc.cluster.local',
                                   5672,
                                   '/',
                                   credentials)

    connection = pika.BlockingConnection(parameters)
    channel = connection.channel()

    channel.queue_declare(queue='hello')

    def callback(ch, method, properties, body):
        print(" [x] Received %r" % body)

    channel.basic_consume(callback,
                      queue='hello',
                      no_ack=True)

    connection.close()
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mq-send-config
  namespace: demomsg
data:
  send.py: |
    #!/usr/bin/env python
    # send.py

    import pika

    credentials = pika.PlainCredentials('rabbitmq', 'znwk2BaTLAqowMrv')
    parameters = pika.ConnectionParameters('rabbitmqsrv.demomsg.svc.cluster.local',
                                   5672,
                                   '/',
                                   credentials)

    connection = pika.BlockingConnection(parameters)

    channel = connection.channel()

    channel.queue_declare(queue='hello')

    channel.basic_publish(exchange='',
                  routing_key='hello',
                  body='Hello W0rld!')
    print(" [x] Sent 'Hello World!'")
    connection.close()
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: rabbitmqclient
  namespace: demomsg
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmqclient
  template:
    metadata:
      labels:
        app: rabbitmqclient
    spec:
      containers:
      - name: rabbitmqclient-dc-pod
        image: prasenforu/mqclient:2.0
        ports:
        - containerPort: 9000
        volumeMounts:
        - mountPath: /etc/webhook/receive.py
          subPath: receive.py
          name: mq-receive-volume-config
        - mountPath: /etc/webhook/receiveall.py
          subPath: receiveall.py
          name: mq-receiveall-volume-config
        - mountPath: /etc/webhook/send.py
          subPath: send.py
          name: mq-send-volume-config
      volumes:
      - configMap:
          defaultMode: 493
          name: mq-receive-config
        name: mq-receive-volume-config
      - configMap:
          defaultMode: 493
          name: mq-receiveall-config
        name: mq-receiveall-volume-config
      - configMap:
          defaultMode: 493
          name: mq-send-config
        name: mq-send-volume-config
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmqclient
  namespace: demomsg
  labels:
    app: rabbitmqclient
spec:
  type: LoadBalancer
  ports:
  - name: 9000-tcp
    port: 9000
    protocol: TCP
    targetPort: 9000
  selector:
    app: rabbitmqclient
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: rabbitmqsrv
  namespace: demomsg
spec:
  endpoints:
  - interval: 5s
    port: 9090-metrics
  selector:
    matchLabels:
      app: rabbitmqsrv
      
